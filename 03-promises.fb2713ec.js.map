{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,oBAKtC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAXbT,EAAKC,KAAKgB,iBAAiB,UAe3B,SAAkBC,GAChBA,EAAMC,iBACN,IAAIC,EAAQC,OAAOrB,EAAKI,WAAWkB,OACnC,MAAMC,EAASF,OAAOrB,EAAKM,YAAYgB,OACjCE,EAAOH,OAAOrB,EAAKK,UAAUiB,OAEnC,GAAIF,EAAQ,GAAKG,GAAU,GAAKC,EAAO,EAOrC,OANA1B,EAAA2B,OAAOC,QAAQ,8BAA+B,CAC5ClB,SAAU,gBACVmB,YAAa,OACbC,cAAc,SAEhB5B,EAAKC,KAAK4B,QAIZ,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAQO,GAAK,EAC/BvB,EAAcuB,EAAI,EAAGV,GAClBW,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBX,EAAA2B,OAAOO,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEhEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBX,EAAA2B,OAAOC,QAAQ,sBAAoBlB,QAAeC,MAAU,IAEhEW,GAASI,EAEXxB,EAAKC,KAAK4B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('form'),\n  delayInput: document.querySelector('[name=\"delay\"]'),\n  stepInput: document.querySelector('[name=\"step\"]'),\n  amountInput: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  let delay = Number(refs.delayInput.value);\n  const amount = Number(refs.amountInput.value);\n  const step = Number(refs.stepInput.value);\n\n  if (delay < 0 || amount <= 0 || step < 0) {\n    Notify.failure('Please enter positive value', {\n      position: 'center-center',\n      backOverlay: 'true',\n      clickToClose: true,\n    });\n    refs.form.reset();\n    return;\n  }\n\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n  refs.form.reset();\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","amount","step","Notify","failure","backOverlay","clickToClose","reset","i","then","success","catch"],"version":3,"file":"03-promises.fb2713ec.js.map"}